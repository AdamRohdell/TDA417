Task 1: figuring out the complexity
-----------------------------------

Insertion.java on:
  random inputs: n^2
  95% sorted inputs: n^2
  sorted inputs: n

Quick.java on:
  random inputs: n
  95% sorted inputs: n
  sorted inputs: n^2

Merge.java on:
  random inputs: n lg n
  95% sorted inputs: ????
  sorted inputs: ????

Arrays.sort on:
  random inputs: n lg n
  95% sorted inputs: ????
  sorted inputs: ????

Task 2: improving quicksort
---------------------------

Do the following changes affect the complexity of quicksort on any kind of
input data? If so, what is it that changes?

  1. Shuffling the array first: [no] [yes+reason]
  

  2. Median-of-three pivot selection: [no] [yes+reason]
  Also makes the sorted array Linear complexity but also improves time by alot.

  3. Insertion sort for small arrays: [no] [yes+reason]
  Does not change complexity of the Quicksort but improves time.
  
4. Which combination of improvements gives the best result?
If you use insertion sort for small arrays, say what cutoff you used.

We found that using Median-of-three and replacing Quicksort for Insertion at 300 cutoff worked best.
We used 300 as we saw it as just about the pivot point in the Bench where Insertionsort is faster than Quicksort.

[...answer here...]

1. Yes, this makes Quicksorting the sorted array Linear.

2. Yes, also makes the sorted array Linear complexity but also improves time by alot.

3. No, does not change complexity of the Quicksort but improves time.


4. 
We found that using Median-of-three and replacing Quicksort for Insertion at 300 cutoff worked best.
We used 300 as we saw it as just about the pivot point in the Bench where Insertionsort is faster than Quicksort.

As the Shuffling and Median-of-three both serves the purpose of "shuffling" the array from completely sorted,
we could see that the Median-of-three was enough to remove the quadratic complexity and a lot faster since we did
not shuffle the whole array.