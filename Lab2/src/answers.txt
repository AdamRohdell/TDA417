


/******************************************************************************
 *  DAT038, TDA417  Datastrukturer och algoritmer, LP2 2019
 *  Lab 2: Autocomplete
 ******************************************************************************/

Name of lab group: [136]
Group member A:    [Amanda Dehl√©n]
Group member B:    [Adam Rohdell]


/******************************************************************************
 *  How many hours did you spend on the assignment?
 *****************************************************************************/

Group member A:    [6]
Group member B:    [6]


/******************************************************************************
 *  Describe how your firstIndexOf() method in RangeBinarySearch.java
 *  finds the first index of a key that equals the search key.
 *****************************************************************************/
We ues the binary search theory but we do not stop looking for the item when we find the first match.
Instead we save the index of the match and check if we can find an match that have a lower index.
We do this by keep searching for the item in the array with a upper index bound equal to the match - 1

/******************************************************************************
 *  What is the worst case time complexity in the number of compares
 *  that each of the operations in the Autocomplete data type make,
 *  as a function of the number of terms n and the number of matching terms m?
 *
 *  You can answer in O() notation, or in order-of-growth notation.
 *  Recall that in both notations you should discard leading coefficients
 *  and lower-order terms, e.g., m^2 + m log n.
 *****************************************************************************/

constructor:  [O(N log N)]

The Arrays.sort method was used and has a O(N log N) complexity

allMatches():   [O(log N + M log M)]

We use the Arrays.copyOfRange which have linear complexity and Arrays.sort which have O(N log N) complexity. We also search
for the first and last index which will give us log N complexity as well.


numberOfMatches():   [O(log N)]

We uses RangeBinarySearch.lastIndexOf and RangeBinarySearch.firstIndexOf which both have an O(log N) complexity
which gives an log N + 1 complexity, simplified to O(log N)


/******************************************************************************
 *  Are there any known bugs / limitations?
 *****************************************************************************/
We sometimes get 1 number of matches but it does not print it out

/******************************************************************************
 *  Did you collaborate with any other students on this lab?
 *  If so, please write in what way you collaborated and with whom.
 *  Also include any resources (including the web) that you may
 *  may have used in creating your design.
 *****************************************************************************/
Geeksforgeeks.org - Arrays.sort, Arrays.copyOf, binary search

/******************************************************************************
 *  Describe any serious problems you encountered.                    
 *****************************************************************************/




/******************************************************************************
 *  List any other comments here. Feel free to provide any feedback   
 *  on how much you learned from doing the assignment, and whether    
 *  you enjoyed doing it.                                             
 *****************************************************************************/
It was interesting exercises but some instructions could have been a bit more clear

  
